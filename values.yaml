# Default values for django-production-chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 2

minReplicas: 5
maxReplicas: 75

targetAverageUtilization: 100

repo: "prereq"

nameOverride: ""
fullnameOverride: ""

branch: "master"

containerPort: 8000

containerPorts:
  enabled: false
#  ports:
#    - name: http
#      containerPort: 8000
#      protocol: TCP
#    - name: smtp
#      containerPort: 25
#      protocol: TCP

## service defines a service object to expose the chart's deployment
## or statefulset as a service.
service:
  enabled: true
  ports:
    - port: 80
      targetPort: http
      name: http

## services is a dict defining a service object of each type specified by
## the key and associated with the chart's deployment or statefulset.
## can be used in place of the "service" chart value, but typically
## used to add additional services
#services:
#  LoadBalancer:
#    ports:
#      - port: 25
#        targetPort: 25
#        protocol: TCP
#        name: smtp

deployment:
  enabled: true

deploymentInitialization:
  enabled: true

statefulset:
  enabled: false

image:
  repository: "acait/django-contianer"
  tag: "develop"

# baseline security policy for various components
securityPolicy:
  enabled: false
  deploy:
    skipCheck:
      - "CKV_K8S_22=Readonly root file system too restictive"
      - "CKV_K8S_31=Seccomp default breaks HPA metrics api queries"
      - "CKV_K8S_40=Django-container base sets uid 1000"
  deployment:
    skipCheck:
      - "CKV_K8S_8=Liveness probe more trouble than it's worth"
      - "CKV_K8S_22=Readonly root file system too restictive"
      - "CKV_K8S_31=Seccomp default breaks HPA metrics api queries"
      - "CKV_K8S_40=acait uid 1000"
    spec:
      automountServiceAccountToken: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
  ingress:
    skipCheck:
      - "CKV_K8S_153=Users are trusted to update ingress"
  statefulset:
    skipCheck:
      - "CKV_K8S_8=Liveness probe more trouble than it's worth"
      - "CKV_K8S_22=Readonly root file system too restictive"
      - "CKV_K8S_31=Seccomp default breaks HPA metrics api queries"
      - "CKV_K8S_40=acait uid 1000"
    spec:
      automountServiceAccountToken: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
  daemon:
    skipCheck:
      - "CKV_K8S_8=Liveness not relevant in this context"
      - "CKV_K8S_9=Management command presumes initialized app"
      - "CKV_K8S_22=Readonly root file system too restictive"
      - "CKV_K8S_31=Seccomp default breaks HPA metrics api queries"
      - "CKV_K8S_40=acait uid 1000"
    spec:
      automountServiceAccountToken: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
  cronjob:
    skipCheck:
      - "CKV_K8S_8=Liveness not relevant in this context"
      - "CKV_K8S_22=Readonly root file system too restictive"
      - "CKV_K8S_31=Seccomp default apears to break HPA metrics api"
      - "CKV_K8S_40=acait uid 1000"
    template:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
  containerBase:
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 5

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  path: /
  tls: {}
  type: nginx
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

database:
  engine: "mysql"

externalService:
  enabled: false

cronjob:
  enabled: false
## example cronjob definition
#  enabled: true
#  jobs:
#    - name: periodic-task
#      schedule: "5 8 * * 1-5"
#      command: ["/scripts/management_command.sh"]
#      args: ["periodic_task"]
## optional specific resources
#      resources:
#        limits:
#          cpu: 750m
#          memory: 1024Mi
#        requests:
#          cpu: 25m
#          memory: 256Mi

## more efficient for shorter jobs and more complete monitoring
daemon:
  enabled: false
## example daemon definition
#  enabled: true
#  daemons:
#    - name: notify-users
#      command: ["/scripts/management_daemon.sh"]
## command can run on a delay seconds interval
#      args: ['--delay', 15, 'notify_users']
## or following a cron specification
#      args: ['--cron', '*/5 * * * *', 'notify_users']
## optional specific resources
#      resources:
#        limits:
#          cpu: 750m
#          memory: 1024Mi
#        requests:
#          cpu: 25m
#          memory: 256Mi

memcached:
  enabled: false
  image: memcached:1.6.9
  replicaCount: 1
  updateStrategy:
    type: RollingUpdate
# override default command, which is:
  command:
    - "memcached"
    - "-m"
    - "64"
    - "-o"
    - "modern"
    - "-v"
# override resource defaults, which are:
  resources:
    limits:
      cpu: 500m
      memory: 128Mi
    requests:
      cpu: 25m
      memory: 64Mi

certs:
  mounted: false

gcsCredentials:
  mounted: false

mountedSecrets:
  enabled: false
##
## enabling will project all the secrets in secretName as files named by
## the secret's key
##
#  enabled: true
#  secretName: "my-app-data"
##
## optional: override mountPath default with, say, "/app/secrets"
##
#  mountPath: "/data"
##
## optional: use items list to pluck specific secrets by key and specify
## the projected secret's filename in the mountPath directory
##
#  items:
#   - key: "accounts"
#     path: "accounts.csv"

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 25m
    memory: 256Mi

metrics:
  enabled: true
  serviceMonitor:
    enabled: true
  pushgateway:
    enabled: true
    replicaCount: 1

readiness:
  enabled: false
## optionally define command, httpGet, tcpSocket
## default is command below
#  command:
#    - "/scripts/ready.sh"
## alternatives must define/provide endpoint
#  httpGet:
#    path: /readiness
#    port: "8080"
#  tcpSocket:
#    port: "5050"
## optionally override delay and period
#  initialDelay: "5"
#  period: "5"

lifecycle:
  enabled: true
  preStop:
    enabled: true
    command: ["/bin/sh","-c", "if [ -x /scripts/prestop.sh ] ; then /scripts/prestop.sh; else /bin/sleep 20; fi"]

environmentVariables:
  - name: "ENV"
    value: "dev"

certs:
  mounted: False

externalSecrets:
  enabled: false
  secrets:
    - name: test.app.uw.edu-secrets
      externalKey: team/app/test/secrets
      data:
        - name: secret-one
          property: bar
        - name: secret-too
          property: mumble

# Billing values used to apply billing-related labels to resources
billingCodes:
  - code: "517"
    name: campus-events-calendar-trumba
    releaseNames:
      - eventcal
  - code: "522"
    name: catalyst-tools
    releaseNames:
      - catalyst
  - code: "554"
    name: enterprise-portal-myuw
    releaseNames:
      - myuw
      - myuw-vue
  - code: "629"
    name: campus-technology-support
    releaseNames:
      - axdd-components
      - github-inventory
      - handshake
      - interview-db
      - jira-webhook
      - linkbot
      - mdot
      - mdot-rest
      - prt
  - code: "740"
    name: lecture-capture-panopto
    releaseNames:
      - scheduler
  - code: "742"
    name: learning-management-systems-canvas
    releaseNames:
      - canvas
      - canvas-login-statics
      - course-roster
      - course-users
      - grading-standards
      - infohub
      - libguides
  - code: "762"
    name: email-lists-mailman
    releaseNames:
      - mailman-core
      - mailman-web
  - code: "785"
    name: student-experience-applications
    releaseNames:
      - scout
      - scout-manager
      - spotseeker
      - uw-foodalert
  - code: "786"
    name: student-instructor-success-analytics
    releaseNames:
      - canvas-analytics
      - coda
      - compass
      - dawgpath
      - retention-dashboard
      - retention-data-pipeline
      - uwperson
  - code: "787"
    name: student-engagement-tools
    releaseNames:
      - gradepage
  - code: "788"
    name: training-management-system-bridge
    releaseNames:
      - bridge
  - code: "789"
    name: zoom-video-conferencing
    releaseNames:
      - zoom-login-statics
  - code: "830"
    name: admissions-enrollment-management-tools
    releaseNames:
      - admissions-cohort-manager
      - vax-status-listener

nodeSelector: {}

tolerations: []

affinity: {}
## set directly, or use shortcut below to schedule pods across nodes
#affinity:
#   podsSpanNodes: true

## sidecarContainers defines additional containers to run within the pod.
## each key is the name of the sidecar container, and it's data is simply
## toYaml'd into the pod's container list.
## Note: do not define volumeMounts here as they are added via "podVolumes"
## definitions.
#sidecarContainers:
#  smtpforward:
#    image: "gcr.io/uwit-mci-axdd/uw-ssh-client:4aad3bd"
#    environmentVariables:
#      - name: JUMPHOST_ID_KEY
#        valueFrom:
#          secretKeyRef:
#            name: postfix-test-secrets
#            key: jumphost-id-key
#      - name: JUMPHOST_ID
#        valueFrom:
#          secretKeyRef:
#            name: postfix-test-secrets
#            key: jumphost-id
#      - name: JUMPHOST_HOSTNAME
#        valueFrom:
#          secretKeyRef:
#            name: postfix-test-secrets
#            key: jumphost-hostname
#      - name: SMTP_SERVER
#        valueFrom:
#          secretKeyRef:
#            name: postfix-test-secrets
#            key: smtp-server
#    command:
#      - "sh"
#      - "-c"
#      - 'mkdir -m 0700 ~/.ssh && echo "${JUMPHOST_ID_KEY}" > ~/.ssh/id_ecdsa && chmod 400 ~/.ssh/id_ecdsa && ssh ${JUMPHOST_ID}@${JUMPHOST_HOSTNAME} -o StrictHostKeyChecking=no -N -L 127.0.0.1:25:{SMP_SERVER}:25'


## podVolumes defines each volume available to the pod and how each volume
## is made available to containers.  each key is the name that will be
## used within the pod to bind the volume to the volume mount, and
## defines a dict containing:
##   "volume"     : (required) defines a volume in the pod.
##                  volume can define:
##                     configMap     : reference to a configmap define
##                                     elswhere in the cluster. typically
##                                     typically defined in configMaps (below)
##                     claim         : reference to a pvc defined elsewhere in
##                                     the cluster. a PersistentVolumeClaim object
##                                     is automatically created based on this definition
##                     claimTemplate : reference to a pvc defined elsewhere in
##                                     the cluster. a volumeClaimTemplates entry
##                                     is automatically created based on this definition
##                     or yaml that will be directly added to the pod's volumes list.
##   "mount"      : (requireed) defines how the volume will be mounted by containers
##   "containers" : (optional) lists containers within the pod the mount
##                  definition applies to.  if undefined, the mount is added to
##                  only the primary container. if defined, the mount is added to
##                  each named container. the name "base" refers to the primary
##                  container defined in the pod.
##
#podVolumes:
#  var-mailman:
#    volume:
#      claimTemplate:
#        accessModes:
#          - ReadWriteOnce
#        storageClassName: standard
#        storageSize: 10Gi
#    mount:
#      mountPath: /app/mailman/var
#  var-spool-postfix:
#    volume:
#      claimTemplate:
#        accessModes:
#          - ReadWriteOnce
#        storageClassName: standard
#        storageSize: 3Gi
#    mount:
#      mountPath: /var/spool/postfix
#    containers: [ base, postfix ]
#  postfix-config:
#    volume:
#      configMap:
#        name: postfix-main-cf
#    mount:
#      mountPath: /config/main.cf
#      subPath: main.cf
#    containers: [ postfix ]


## configmaps defines one or more ConfigMap objects within the cluster.
## each dict key names the ConfigMap and can be used within the values file
## for reference.  Whatever the key defines will define the ConfigMap's data.
#configmaps:
#  postfix-main-cf:
#    main.cf: |
#      myhostname = mailman-core-prod-test
#      mail_name = Mailman POC
#  gunicorn-tpl:
#    gunicorn.tpl: |
#      [gunicorn]
#      graceful_timeout = 30
#      timeout = 360
