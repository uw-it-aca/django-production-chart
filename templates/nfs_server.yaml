{{- if .Values.nfsServer.enabled }}
{{- $name := printf "%s-nfs-server-%s" ( include "django-production-chart.releaseIdentifier" . ) .Values.nfsServer.name -}}
{{- $pvc_name := printf "%s-pvc" $name -}}
{{- $namespace := include "django-production-chart.namespaceIdentifier" . -}}
{{- $instance := .Release.Name | quote -}}
{{- $role := printf "%s-nfs-server" ( include "django-production-chart.releaseIdentifier" . ) -}}
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: {{ $pvc_name }}
  namespace: {{ $namespace }}
  labels:
    app.kubernetes.io/name: {{ $pvc_name }}
    app.kubernetes.io/instance: {{ $instance }}
    app.kubernetes.io/component: nfs-server
{{- include "django-production-chart.resourceLabels" . | nindent 4 }}
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: {{ .Values.nfsServer.storageClassName | default "standard" | quote }}
  resources:
    requests:
      storage: {{ .Values.nfsServer.capacity }}
  volumeName: {{ $pvc_name }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $name }}
  namespace: {{ $namespace }}
  labels:
    app.kubernetes.io/name: {{ $name }}
    app.kubernetes.io/instance: {{ $instance }}
    app.kubernetes.io/component: nfs-server
    role: {{ $role }}
{{- include "django-production-chart.resourceLabels" . | nindent 4 }}
{{- if .Values.securityPolicy.enabled }}
  annotations:
{{- include "django-production-chart.securityPolicyAnnotations" .Values.securityPolicy.nfsServer | indent 4 }}
{{- end }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ $name }}
      app.kubernetes.io/instance: {{ $instance }}
      role: {{ $role }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ $name }}
        app.kubernetes.io/instance: {{ $instance }}
{{- if .Values.securityPolicy.enabled }}
{{- if .Values.securityPolicy.nfsServer }}
{{- if .Values.securityPolicy.nfsServer.annotations }}
      annotations:
{{ toYaml .Values.securityPolicy.nfsServer.annotations | indent 8 }}
{{- end }}
{{- end }}
{{- end }}
    spec:
      containers:
      - name: nfs-server
        image: k8s.gcr.io/volume-nfs:0.8
{{- if .Values.nfsServer.resources }}
        resources:
{{ toYaml .Values.nfsServer.resources | indent 10 }}
{{- end }}
        ports:
          - name: nfs
            containerPort: 2049
          - name: mountd
            containerPort: 20048
          - name: rpcbind
            containerPort: 111
        securityContext:
          privileged: true
        volumeMounts:
          - mountPath: /exports
            name: nfs-pvc
      volumes:
        - name: nfs-pvc
          persistentVolumeClaim:
            claimName: {{ $pvc_name }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ $name }}
  namespace: {{ $namespace }}
  labels:
    app.kubernetes.io/name: {{ $name }}
    app.kubernetes.io/instance: {{ $instance }}
    app.kubernetes.io/component: nfs-server
{{- include "django-production-chart.resourceLabels" . | nindent 4 }}
{{- if .Values.serviceAnnotations -}}
  annotations:
{{ toYaml .Values.serviceAnnotations | indent 4 }}
{{- end }}
spec:
  clusterIP: None
  ports:
    - name: nfs
      port: 2049
    - name: mountd
      port: 20048
    - name: rpcbind
      port: 111
  selector:
    app.kubernetes.io/name: {{ $name }}
    app.kubernetes.io/instance: {{ $instance }}
    role: {{ $role }}
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ $name }}
  namespace: {{ $namespace }}
  labels:
    app.kubernetes.io/name: {{ $name }}
    app.kubernetes.io/instance: {{ $instance }}
    app.kubernetes.io/component: nfs-server
{{- include "django-production-chart.resourceLabels" . | nindent 4 }}
spec:
  capacity:
    storage: {{ .Values.nfsServer.capacity }}
  accessModes:
    - ReadWriteMany
  nfs:
    server: {{ $name }}.{{ $namespace }}.svc.cluster.local
    path: "/"
{{- end }}