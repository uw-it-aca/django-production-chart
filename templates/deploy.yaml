apiVersion: batch/v1
kind: Job
metadata:
  name: "{{.Release.Name}}"
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    helm.sh/chart: "{{.Chart.Name}}-{{.Chart.Version}}"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "django-production-chart.releaseIdentifier" . }}-release-job-{{ .Values.commitHash | trunc 7 }}-{{ randAlphaNum 3 | lower}}
  labels:
    app.kubernetes.io/name: {{ include "django-production-chart.releaseIdentifier" . }}
    helm.sh/chart: {{ include "django-production-chart.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  backoffLimit: 1
  template:
    metadata:
      name: "{{.Release.Name}}"
      labels:
        app.kubernetes.io/managed-by: {{.Release.Service | quote }}
        app.kubernetes.io/instance: {{.Release.Name | quote }}
        helm.sh/chart: "{{.Chart.Name}}-{{.Chart.Version}}"
    spec:
      restartPolicy: Never
      containers:
        - name: {{ include "django-production-chart.releaseIdentifier" . }}
          image: "{{ .Values.image.repository }}:{{ .Values.commitHash }}"
          imagePullPolicy: "Always"
          env:
{{- if .Values.certs.mounted}}
          volumeMounts:
            - name: certs-volume
              readOnly: true
              mountPath: "/certs"
{{- end }}
          env:
{{- if .Values.certs.mounted }}
            - name: CERT_PATH
              value: {{ .Values.certs.certPath | quote }}
            - name: KEY_PATH
              value: {{ .Values.certs.keyPath | quote }}
{{- end }}
            - name: DB
              value: {{ .Values.database.engine | quote }}
            - name: DATABASE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.secretName }}
                  key: username
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.secretName }}
                  key: password
            - name: ENV
              value: "prod"
            - name: PORT
              value: "8080"
            - name: DATABASE_DB_NAME
              value: {{ .Values.database.name | quote }}
            - name: DATABASE_HOSTNAME
              value: {{ .Values.database.hostname | quote }}
{{- range .Values.environmentVariablesSecrets }}
            - name: {{ .name }}
              valueFrom:
                secretKeyRef: 
                  name: {{ .secretName }}
                  key: {{ .secretKey }}
{{- end }}
{{ toYaml .Values.environmentVariables | indent 12 }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
            - name: ENV
              value: "prod"
          command: ["/scripts/deploy.sh"]
          resources:
{{ toYaml .Values.resources | indent 12 }}

