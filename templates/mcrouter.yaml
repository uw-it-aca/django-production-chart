{{- if and .Values.memcached.enabled .Values.memcached.mcrouter.enabled }}
{{- $memcachedService := printf "%s-memcached" ( include "django-production-chart.releaseIdentifier" . ) -}}
{{- $appName := printf "%s-mcrouter" ( include "django-production-chart.releaseIdentifier" . ) -}}
{{- $releaseName := .Release.Name -}}
{{- $releaseNamespace := .Release.Namespace -}}
{{- $controller := .Values.memcached.mcrouter.controller | default "daemonset" -}}
{{- $antiAffinity := .Values.memcached.mcrouter.statefulsetParams.antiAffinity | default "hard" -}}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ $appName }}
  namespace: {{ $releaseNamespace }}
  labels:
    app.kubernetes.io/component: mcrouter
{{- include "django-production-chart.resourceLabels" . | nindent 4 }}
spec:
  clusterIP: None
  ports:
  - name: mcrouter-port
    port: {{ default 5000 .Values.memcached.mcrouter.params.port }}
    targetPort: mcrouter-port
  selector:
    app.kubernetes.io/name: {{ $appName }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ printf "%s-mcrouter-configmap" ( include "django-production-chart.releaseIdentifier" . ) }}
  namespace: {{ $releaseNamespace }}
  labels:
    app.kubernetes.io/component: mcrouter
{{- include "django-production-chart.resourceLabels" . | nindent 4 }}
data:
  config.json: |-
{{- if .Values.memcached.mcrouter.params.configFile }}{{ range .Files.Lines .Values.memcached.mcrouter.params.configFile }}
    {{ . }}{{ end }}
{{- else }}
    {
      "pools": {
        "A": {
          "servers": [
            {{- range $i, $e := until (.Values.memcached.replicaCount | int) }}
            "{{ $memcachedService }}-{{ $i }}.{{ $memcachedService }}.{{ $releaseNamespace }}.svc.cluster.local:11211",
            {{- end }}
          ]
        }
      },
      "route": "PoolRoute|A"
    }
{{- end }}
{{- if eq $controller "daemonset" }}
---
apiVersion: {{ template "daemonset.apiVersion" . }}
kind: DaemonSet
metadata:
  name: {{ $appName }}
  labels:
    app.kubernetes.io/component: mcrouter
{{- include "django-production-chart.resourceLabels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: mcrouter
{{- include "django-production-chart.baseLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
{{- include "django-production-chart.baseLabels" . | nindent 8 }}
    spec:
      containers:
      - name: {{ $appName }}
        image: {{ default "jphalip/mcrouter:0.36.0" .Values.memcached.mcrouter.image }}
        imagePullPolicy: {{ default "" .Values.imagePullPolicy | quote }}
        command: ["mcrouter"]
        args:
        - -p {{ default 5000 .Values.memcached.mcrouter.params.port }}
        - --config-file=/etc/mcrouter/config.json
        volumeMounts:
        - name: config
          mountPath: /etc/mcrouter
        ports:
        - name: mcrouter-port
          containerPort: {{ default 5000 .Values.memcached.mcrouter.params.port }}
          hostPort: {{ default 5000 .Values.memcached.mcrouter.daemonsetParams.hostPort }}
        livenessProbe:
          tcpSocket:
            port: mcrouter-port
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          tcpSocket:
            port: mcrouter-port
          initialDelaySeconds: 5
          timeoutSeconds: 1
        resources:
{{ toYaml .Values.resources | indent 10 }}
      volumes:
      - name: config
        configMap:
          name: {{ printf "%s-mcrouter-configmap" ( include "django-production-chart.releaseIdentifier" . ) }}
{{- end -}}
{{- if eq $controller "statefulset" }}
---
apiVersion: {{ template "statefulset.apiVersion" . }}
kind: StatefulSet
metadata:
  name: {{ $appName }}
  labels:
    app.kubernetes.io/component: mcrouter
{{- include "django-production-chart.resourceLabels" . | nindent 4 }}
spec:
  serviceName: {{ $appName }}
  selector:
    matchLabels:
      app.kubernetes.io/component: mcrouter
{{- include "django-production-chart.baseLabels" . | nindent 6 }}
  replicas: {{ default 1  .Values.memcached.mcrouter.statefulsetParams.replicas }}
  template:
    metadata:
      labels:
        app.kubernetes.io/component: mcrouter
{{- include "django-production-chart.baseLabels" . | nindent 8 }}
    spec:
      affinity:
        podAntiAffinity:
        {{- if eq $antiAffinity "hard" }}
          requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: "kubernetes.io/hostname"
            labelSelector:
              matchLabels:
                app.kubernetes.io/component: mcrouter
{{- include "django-production-chart.baseLabels" . | nindent 16 }}
        {{- else if eq $antiAffinity "soft" }}
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 5
            podAffinityTerm:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app.kubernetes.io/component: mcrouter
{{- include "django-production-chart.baseLabels" . | nindent 16 }}
        {{- end }}
      containers:
      - name: {{ $appName }}
        image: {{ default "jphalip/mcrouter:0.36.0" .Values.memcached.mcrouter.image }}
        imagePullPolicy: {{ default "" .Values.imagePullPolicy | quote }}
        command: ["mcrouter"]
        args:
        - -p {{ default 5000 .Values.memcached.mcrouter.params.port }}
        - --config-file=/etc/mcrouter/config.json
        volumeMounts:
        - name: config
          mountPath: /etc/mcrouter
        ports:
        - name: mcrouter-port
          containerPort: {{ default 5000 .Values.memcached.mcrouter.params.port }}
        livenessProbe:
          tcpSocket:
            port: mcrouter-port
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          tcpSocket:
            port: mcrouter-port
          initialDelaySeconds: 5
          timeoutSeconds: 1
        resources:
{{ toYaml .Values.resources | indent 10 }}
      volumes:
      - name: config
        configMap:
          name: {{ printf "%s-mcrouter-configmap" ( include "django-production-chart.releaseIdentifier" . ) }}
{{- end }}
{{- end -}}
