{{- if .Values.memcached.enabled }}
{{- $command := .Values.memcached.command -}}
{{- $extraArgs := .Values.memcached.extraArgs | default "" -}}
{{- $_ := set .Values "releaseIdentifier" ( include "django-production-chart.releaseIdentifier" . ) }}
{{- $_ := set .Values "namespaceIdentifier" ( include "django-production-chart.namespaceIdentifier" . ) }}
{{- $_ := set .Values "instanceIdentifier" ( include "django-production-chart.instanceIdentifier" . ) -}}
{{- $name := printf "%s-memcached" .Values.releaseIdentifier -}}
{{- if and .Values.namespace .Values.namespace.enabled -}}
{{- $name = "memcached" -}}
{{- end -}}
{{- $instance := .Values.instanceIdentifier }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ $name }}
  namespace: {{ .Values.namespaceIdentifier }}
  labels:
    app.kubernetes.io/name: {{ $name }}
    app.kubernetes.io/instance: {{ $instance }}
    app.kubernetes.io/component: memcached
{{- include "django-production-chart.resourceLabels" . | nindent 4 }}
{{- if .Values.serviceAnnotations -}}
  annotations:
{{ toYaml .Values.serviceAnnotations | indent 4 }}
{{- end }}
spec:
  clusterIP: None
  ports:
    - name: memcache
      port: 11211
      targetPort: memcache
{{- if .Values.metrics.enabled }}
    - name: metrics
      port: 9150
      targetPort: metrics
{{- end }}
  selector:
    app.kubernetes.io/name: {{ $name }}
    app.kubernetes.io/instance: {{ $instance }}
{{- if and .Values.metrics.enabled .Values.metrics.serviceMonitor.enabled }}
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: {{ $name }}
  namespace: {{ $.Values.namespaceIdentifier }}
  labels:
    app.kubernetes.io/name: {{ $name }}
    app.kubernetes.io/instance: {{ $instance }}
    app.kubernetes.io/component: memcached
{{- include "django-production-chart.resourceLabels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ $name }}
      app.kubernetes.io/instance: {{ $instance }}
  endpoints:
    - port: metrics
{{- end }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $name }}
  namespace: {{ $.Values.namespaceIdentifier }}
  labels:
    app.kubernetes.io/name: {{ $name }}
    app.kubernetes.io/instance: {{ $instance }}
    app.kubernetes.io/component: memcached
{{- include "django-production-chart.resourceLabels" . | nindent 4 }}
{{- if .Values.securityPolicy.enabled }}
  annotations:
{{- include "django-production-chart.securityPolicyAnnotations" .Values.securityPolicy.memcached | indent 4 }}
{{- end }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ $name }}
      app.kubernetes.io/instance: {{ $instance }}
  serviceName: {{ $name }}
  replicas: {{ .Values.memcached.replicaCount }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ $name }}
        app.kubernetes.io/instance: {{ $instance }}
        app.kubernetes.io/component: memcached
{{- include "django-production-chart.resourceLabels" . | nindent 8 }}
{{- with .Values.podLabels }}
{{ toYaml . | indent 8 }}
{{- end}}
{{- if .Values.securityPolicy.enabled }}
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: "runtime/default"
{{- end }}
{{- with .Values.podAnnotations }}
{{- if not .Values.securityPolicy.enabled }}
      annotations:
{{- end }}
{{ toYaml . | indent 8 }}
{{- end }}
    spec:
{{- if .Values.securityPolicy.enabled }}
      automountServiceAccountToken: false
      securityContext:
        fsGroup: 11211
{{- end }}
      containers:
        - name: {{ $name }}
          image: {{ .Values.memcached.image | quote }}
          imagePullPolicy: {{ default "Always" .Values.imagePullPolicy | quote }}
{{ include "django-production-chart.specContainerCommand" (dict "command" $command "args" $extraArgs) | indent 10}}
{{- if .Values.securityPolicy.enabled }}
          securityContext:
            runAsNonRoot: true
            runAsUser: 11211
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
{{- end }}
          ports:
            - name: memcache
              containerPort: 11211
{{- if .Values.memcached.liveness }}
  {{- if .Values.memcached.liveness.enabled }}
          livenessProbe:
            tcpSocket:
              port: memcache
            initialDelaySeconds: 30
            timeoutSeconds: 5
  {{- end }}
{{- end }}
          readinessProbe:
            tcpSocket:
              port: memcache
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
{{ toYaml .Values.memcached.resources | indent 12 }}
{{- if .Values.metrics.enabled }}
        - name: metrics
          image: "prom/memcached-exporter:latest"
          imagePullPolicy: {{ default "Always" .Values.metrics.imagePullPolicy | quote }}
{{- if .Values.securityPolicy.enabled }}
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
{{- end }}
          ports:
            - name: metrics
              containerPort: 9150
{{- if .Values.metrics.resources }}
          resources:
{{ toYaml .Values.metrics.resources | indent 12 }}
{{- end }}
{{- end }}
{{- with .Values.extraContainers }}
{{ tpl . $ | indent 8 }}
{{- end }}
{{- with .Values.extraVolumes }}
      volumes:
{{ tpl . $ | indent 8 }}
{{- end }}
{{- with .Values.memcached.nodeSelector }}
      nodeSelector:
{{ toYaml . | trim | indent 8}}
{{- end }}
{{- with .Values.memcached.tolerations }}
      tolerations:
{{ toYaml . | trim | indent 8}}
{{- end }}
{{- with .Values.memcached.affinity }}
      affinity:
{{ toYaml . | trim | indent 8}}
{{- end }}
  updateStrategy:
    type: {{ .Values.memcached.updateStrategy.type }}
    {{- if (eq "Recreate" .Values.memcached.updateStrategy.type) }}
    rollingUpdate: null
    {{- end }}
{{- end -}}
